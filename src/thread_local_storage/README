When tls_create is first run, my code checked if any TLS have been called yet with a global variable. If not, the program sets up a signal handler 
The signal handler catches SIGSEG and SIGBUS and runs it through a function to handle the funciton. The function checks the address of the page to 
see if its a real seg fault, or a thread trying to access memory that doesn't belong to it. If it is a real fault, it exits the thread. 
Inside TLS_create, a new object of type struct TLS is created and its values are set. Space is allocated using calloc and each page is intalized with mmap. Next, the value is added to the linked list. The linked list contains the thread id, tls, and next and prev nodes. The tls and tid are added to the end of the linked list. 
Next, tls_read error checks to make sure thread has a tls by iterating through the linked list until it finds null or the matching tid. It also checks the arguemnts are valid. If succesful, each page is unprotected and the values are read from offset to offset+length with each value added to buffer. The data is read a page at a time. The pages are then reprotected. 
TLS_destroy checks if the current thread has a tls, then deletes each page with munmap if the page is not referenced to by another tls. If it is referenced by another tls, it decreases the ref_count of that page. The node is then removed from the linked list by setting the prev value to the next and the next value to the prev. The node and tls are then freed.
TLS_clone error checks to see if the arguemnt tid has a valid TLS and the current thread does not have a TLS. If it passes, tls_create is called with the global variable clone = 1. This means inside TLS_create, new pages will not be created. Instead, in TLS_clone, the pages of the input tls are pointed to by the pages of the new tls. This is part of CoW implementation.
TLS_write works similarly to TLS_read. The main difference is a check in the ref count of each page. If a page that is being written to has a ref_count > 1, a new page is created instead of editing the old one. The page is created with mmap and the information is copied with memcpy. The page is then recreated and added to the current tls with the new data to be written. 

An issue that took me some time to fix was not realizing that my CoW implmentation did not copy the old data to the new data. I fixed this by adding memcpy. 