This project reuses the code from project2. pthread_join() was a new function created. When a thread calls pthread_join with arguemnt thread, if the thread is not exited, it swithces its state to blocked. When a thread is blocked, any context switch to that thread will immediatly return to the scheduler. Orignally, I had it so a thread that was blocked would not be called at all. However, I had an issue with one of the autograder test cases when doing this, so I had to switch the method. When it switches to a blocked thread, it checks if the thread its watiing for has exited. Once the waited on thread returns, it returns to the pthread_exit_wrapper() function, which uses assembly to to collect the return value in rax. This is then passed into the pthread_exit() funciton. The return value is saved in the thread control block. Once pthread_join() is called on an exited thread, or the thread exits after being called, the resources for the thread will be freed. 

The next thing added was lock() and unlock(). These funcitons turn stop the signal handler from handling sigalrm. This means the thread will stay on the current thread. However, the scheduler is called after a thread exits, so the thread can still be switched. lock() and unlock() are done using the sigprocmask, which supresses signals in a set. 

The final functions added are the semaphore functions. The semaphore functions are used to create our own version of semaphores. I created a struct called MySem, which holds a sem_t, intalization check, value of semaphore, and pointer to a queue with variables for the queue. These values are intalized in sem_init. The queue integers will point to the first in and the next spot to put something in. sem_wait and sem_post are used to increment and decrement the semaphore. If the value of the semaphore is 0 and sem_wait is called, the thread will be blocked until that resources is avalible. It will be put in a queue. ONce sem_post is called, the thread will change to ready by the use of the queue. sem_destory frees resources for the semaphore. 